#!/usr/bin/env python3
import os
import json
import pika
import sys
from datetime import datetime
import time


class JSONConsumer:
    def __init__(self, host='localhost', queue_name='json_processing_queue'):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è consumer –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è JSON —Ñ–∞–π–ª–æ–≤ –∏–∑ RabbitMQ

        Args:
            host (str): –•–æ—Å—Ç RabbitMQ —Å–µ—Ä–≤–µ—Ä–∞
            queue_name (str): –ò–º—è –æ—á–µ—Ä–µ–¥–∏
        """
        self.host = host
        self.queue_name = queue_name
        self.connection = None
        self.channel = None
        self.processed_count = 0
        self.error_count = 0
        # –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å—á–µ—Ç—á–∏–∫ —Ñ–∞–π–ª–æ–≤
        self.file_counter = 0

    def connect(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ RabbitMQ"""
        try:
            self.connection = pika.BlockingConnection(
                pika.ConnectionParameters(host=self.host)
            )
            self.channel = self.connection.channel()

            # –°–æ–∑–¥–∞–µ–º –æ—á–µ—Ä–µ–¥—å (–µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
            self.channel.queue_declare(queue=self.queue_name, durable=True)

            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º QoS - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ –æ–¥–Ω–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é –∑–∞ —Ä–∞–∑
            self.channel.basic_qos(prefetch_count=1)

            print(f"‚úì –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ RabbitMQ –Ω–∞ {self.host}")
            print(f"‚úì –û—á–µ—Ä–µ–¥—å '{self.queue_name}' –≥–æ—Ç–æ–≤–∞")
            return True

        except pika.exceptions.AMQPConnectionError:
            print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ RabbitMQ!")
            print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ RabbitMQ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω")
            return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False

    def get_next_file_number(self):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –Ω–æ–º–µ—Ä —Ñ–∞–π–ª–∞ –∏ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫

        Returns:
            int: –ù–æ–º–µ—Ä —Ñ–∞–π–ª–∞
        """
        self.file_counter += 1
        return self.file_counter

    def process_json_file(self, file_path):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç JSON —Ñ–∞–π–ª

        Args:
            file_path (str): –ü—É—Ç—å –∫ JSON —Ñ–∞–π–ª—É

        Returns:
            dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
            if not os.path.exists(file_path):
                return {
                    "success": False,
                    "error": f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}"
                }

            # –ß–∏—Ç–∞–µ–º JSON —Ñ–∞–π–ª
            with open(file_path, 'r', encoding='utf-8') as f:
                data = json.load(f)

            # –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Å–≤–æ—é –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏
            # –ù–∞–ø—Ä–∏–º–µ—Ä:

            # 1. –ü–æ–¥—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–∞–∫–∞–Ω—Å–∏–π
            if isinstance(data, list):
                vacancy_count = len(data)
            elif isinstance(data, dict):
                vacancy_count = len(data.get('items', []))
            else:
                vacancy_count = 1

            # 2. –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö (–ø—Ä–∏–º–µ—Ä)
            analysis_result = self.analyze_vacancies(data)

            # 3. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            self.save_processing_result(file_path, analysis_result)

            return {
                "success": True,
                "vacancy_count": vacancy_count,
                "analysis": analysis_result,
                "processed_at": datetime.now().isoformat()
            }

        except json.JSONDecodeError as e:
            return {
                "success": False,
                "error": f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}"
            }
        except Exception as e:
            return {
                "success": False,
                "error": f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {e}"
            }

    def analyze_vacancies(self, data):
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–π

        Args:
            data: JSON –¥–∞–Ω–Ω—ã–µ

        Returns:
            dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞
        """
        try:
            # –ü—Ä–∏–º–µ—Ä –∞–Ω–∞–ª–∏–∑–∞ - –∞–¥–∞–ø—Ç–∏—Ä—É–π—Ç–µ –ø–æ–¥ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ
            analysis = {
                "total_vacancies": 0,
                "unique_companies": set(),
                "salary_ranges": [],
                "locations": set()
            }

            # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ - —Å–ø–∏—Å–æ–∫ –≤–∞–∫–∞–Ω—Å–∏–π
            if isinstance(data, list):
                vacancies = data
            elif isinstance(data, dict) and 'items' in data:
                vacancies = data['items']
            else:
                vacancies = [data]

            analysis["total_vacancies"] = len(vacancies)

            for vacancy in vacancies:
                if isinstance(vacancy, dict):
                    # –ê–Ω–∞–ª–∏–∑ –∫–æ–º–ø–∞–Ω–∏–π
                    if 'employer' in vacancy and 'name' in vacancy['employer']:
                        analysis["unique_companies"].add(vacancy['employer']['name'])

                    # –ê–Ω–∞–ª–∏–∑ –∑–∞—Ä–ø–ª–∞—Ç
                    if 'salary' in vacancy and vacancy['salary']:
                        salary_info = vacancy['salary']
                        if 'from' in salary_info or 'to' in salary_info:
                            analysis["salary_ranges"].append({
                                "from": salary_info.get('from'),
                                "to": salary_info.get('to'),
                                "currency": salary_info.get('currency', 'RUR')
                            })

                    # –ê–Ω–∞–ª–∏–∑ –ª–æ–∫–∞—Ü–∏–π
                    if 'area' in vacancy and 'name' in vacancy['area']:
                        analysis["locations"].add(vacancy['area']['name'])

            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º sets –≤ —Å–ø–∏—Å–∫–∏ –¥–ª—è JSON —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            analysis["unique_companies"] = list(analysis["unique_companies"])
            analysis["locations"] = list(analysis["locations"])
            analysis["unique_companies_count"] = len(analysis["unique_companies"])
            analysis["unique_locations_count"] = len(analysis["locations"])

            return analysis

        except Exception as e:
            return {"error": f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}"}

    def save_processing_result(self, file_path, analysis_result):
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞

        Args:
            file_path (str): –ü—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É
            analysis_result (dict): –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞
        """
        try:
            # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            processed_dir = "processed_results"
            os.makedirs(processed_dir, exist_ok=True)

            # –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            base_name = os.path.basename(file_path)
            result_name = f"processed_{base_name}"
            result_path = os.path.join(processed_dir, result_name)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            result_data = {
                "original_file": file_path,
                "processed_at": datetime.now().isoformat(),
                "analysis": analysis_result
            }

            with open(result_path, 'w', encoding='utf-8') as f:
                json.dump(result_data, f, ensure_ascii=False, indent=2)

            print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {result_path}")

        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {e}")

    def callback(self, ch, method, properties, body):
        """
        Callback —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö JSON —Ñ–∞–π–ª–æ–≤
        """
        try:
            # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            received_dir = "received_json_files"
            os.makedirs(received_dir, exist_ok=True)

            # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –Ω–æ–º–µ—Ä —Ñ–∞–π–ª–∞
            file_number = self.get_next_file_number()
            file_name = f"received_{file_number:04d}.json"  # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –≤–µ–¥—É—â–∏–º–∏ –Ω—É–ª—è–º–∏ (0001, 0002, –∏ —Ç.–¥.)
            file_path = os.path.join(received_dir, file_name)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª
            with open(file_path, 'w', encoding='utf-8') as f:
                f.write(body.decode('utf-8'))

            print(f"‚úÖ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {file_path}")

            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            self.processed_count += 1

            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è
            ch.basic_ack(delivery_tag=method.delivery_tag)

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
            self.error_count += 1
            ch.basic_nack(delivery_tag=method.delivery_tag, requeue=False)

    def start_consuming(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –æ—á–µ—Ä–µ–¥–∏"""
        try:
            print("üéØ –ó–∞–ø—É—Å–∫ JSON Consumer...")
            print("=" * 50)

            if not self.connect():
                return False

            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º consumer
            self.channel.basic_consume(
                queue=self.queue_name,
                on_message_callback=self.callback
            )

            print(f"üëÇ –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –æ—á–µ—Ä–µ–¥–∏ '{self.queue_name}'...")
            print("‚èπÔ∏è  –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ CTRL+C")
            print("=" * 50)

            # –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª—É—á–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
            self.channel.start_consuming()

        except KeyboardInterrupt:
            print(f"\n‚èπÔ∏è  –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            print(f"üìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
            print(f"   - –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ: {self.processed_count}")
            print(f"   - –û—à–∏–±–æ–∫: {self.error_count}")
            print(f"   - –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤ —Å–æ–∑–¥–∞–Ω–æ: {self.file_counter}")

            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
            self.channel.stop_consuming()
            return True

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ consumer: {e}")
            return False

    def close(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ"""
        if self.connection and not self.connection.is_closed:
            self.connection.close()
            print("üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å RabbitMQ –∑–∞–∫—Ä—ã—Ç–æ")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    consumer = JSONConsumer()

    try:
        consumer.start_consuming()
    except Exception as e:
        print(f"üí• –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
    finally:
        consumer.close()


if __name__ == "__main__":
    main()