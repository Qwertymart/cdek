# Платформа HR-аналитики и управления компенсациями для СДЭК

## Инструкция по развертыванию
Подробные инструкции по развертыванию платформы доступны в [Руководстве по развертыванию](deployment_guide.md).

## Обзор проекта
Проект направлен на создание автоматизированной платформы для мониторинга рынка труда, анализа заработных плат и управления компенсационными стратегиями для СДЭК. Используя искусственный интеллект, обработку естественного языка (NLP) и настраиваемые источники данных, платформа сокращает ручную работу HR-специалистов, повышает точность решений по компенсациям и укрепляет позицию СДЭК как конкурентоспособного работодателя.

## Почему СДЭК нуждается в этом решении
- **Ручной мониторинг**: HR-специалисты тратят много времени на сбор данных из разрозненных источников (HH.ru, Avito, Telegram, социальные сети), что замедляет принятие решений.
- **Отсутствие единой системы**: Данные не структурированы, а анализ в регионах часто зависит от локальной экспертизы, которая не всегда доступна.
- **Ограниченные инструменты**: Существующие решения (например, аналитика HH.ru) платные, закрытые и не охватывают все необходимые источники.

## Цели проекта
Платформа должна:
1. **Собирать данные** из множества источников:
   - Сайты вакансий: HH.ru, SuperJob, Avito, Rabota.py.
   - Социальные сети: Telegram-каналы, VK, LinkedIn.
   - Фриланс-биржи и локальные доски объявлений.
   - (Будущая задача) Парсинг неструктурированных данных с сайтов с использованием LLM и NLP для:
     - Извлечения деталей вакансий (должность, зарплата, опыт, бенефиты).
     - Нормализации названий должностей к единому классификатору (`job_title_mappings.json`).
     - Анализа нестандартных условий и бенефитов.
2. **Анализировать и визуализировать**:
   - Создавать графики (тепловые карты, тренды, сравнения).
   - Экспортировать отчеты в PDF.
3. **Предоставлять аналитику**:
   - Тепловые карты зарплат по количеству компаний (оптимизация для большого числа компаний).
   - Зарплата в зависимости от стажа (рассматривается разбивка по интервалам или по годам).
   - Количество вакансий в зависимости от зарплаты (возможен переход к кривой для наглядности).
   - Количество вакансий по источникам (оценить необходимость при ограниченных источниках).
   - Количество вакансий по дням (низкий приоритет).
   - Распределение по формату работы (удаленная, гибридная, офисная).

## Технологический стек
- **Backend**: Go (gRPC для межсервисного взаимодействия), Python (парсинг и нормализация данных).
- **База данных**: PostgreSQL для хранения структурированных данных.
- **NLP/LLM**: Модели для анализа текста, классификации и извлечения параметров вакансий.
- **Frontend**: Next.js для отзывчивого интерфейса.
- **Инфраструктура**: Docker для контейнеризации, микросервисная архитектура для масштабируемости.
- **Сообщения**: RabbitMQ (или аналог) для асинхронной обработки данных (реализовано через `messaging/producer.py`).

## Ключевые функции
- **Автоматический парсинг**: Сбор вакансий с HH.ru, SuperJob и других источников (`vacancy_parser/parsers`).
- **Нормализация данных**: Приведение названий должностей к единому классификатору (`normalizer_bd/job_title_mappings.json`).
- **Визуализация трендов**: Интерактивные графики (тепловые карты, тренды) через компоненты фронтенда (`cdek_front/src/components`).
- **API интеграция**: Поддержка интеграции с SAP, 1С через gRPC (`auth_service`, `user_service`, `dashboard_service`).
- **Аутентификация**: Управление пользователями через `auth_service` и `user_service`.

## Ожидаемые результаты
Платформа позволит:
- Сократить время анализа зарплат с дней/недель до часов.
- Повысить точность решений по компенсациям.
- Укрепить позицию СДЭК как работодателя за счет:
  - Конкурентоспособных зарплат и бенефитов.
  - Прогнозирования рыночных трендов (рост спроса на определенные позиции).
  - Снижения риска потери сотрудников из-за несоответствующих зарплат.

## Структура проекта
```
├── README.md                # Основной файл документации
├── auth_service/           # Сервис аутентификации (Go, gRPC)
│   ├── cmd/                # Точка входа сервиса
│   ├── docs/               # Документация API (Swagger)
│   ├── internal/           # Внутренняя логика (обработчики)
│   └── pkg/                # Сгенерированные protobuf файлы
├── cdek_front/             # Фронтенд (Next.js)
│   ├── src/                # Исходный код фронтенда
│   │   ├── app/            # Страницы и маршруты
│   │   ├── components/     # UI-компоненты (графики, фильтры)
│   │   ├── hooks/          # Кастомные хуки (например, аутентификация)
│   │   ├── types/          # TypeScript-типы
│   │   └── utils/          # Утилиты (например, работа с данными)
│   ├── public/             # Статические ресурсы
│   └── tsconfig.json       # Конфигурация TypeScript
├── dashboard_service/      # Сервис аналитики (Go, gRPC)
│   ├── cmd/                # Точка входа сервиса
│   ├── internal/           # Внутренняя логика (обработчики аналитики)
│   └── pkg/                # Сгенерированные protobuf файлы
├── normalizer_bd/          # Модуль нормализации данных (Python)
│   ├── job_title_mappings.json  # Классификатор должностей
│   ├── Normalizer.py       # Логика нормализации
│   ├── consumer.py         # Обработчик сообщений
│   └── create_json_vacancies.py  # Создание JSON с вакансиями
├── user_service/           # Сервис управления пользователями (Go)
│   ├── cmd/                # Точка входа сервиса
│   ├── internal/           # Модели и логика сервиса
│   ├── pkg/                # Сгенерированные protobuf файлы
│   └── transport/          # Транспортный слой
├── vacancy_parser/         # Модуль парсинга вакансий (Python)
│   ├── src/                # Исходный код парсеров
│   │   ├── parsers/        # Парсеры для HH.ru, SuperJob, LLM
│   │   └── messaging/      # Производитель сообщений
│   ├── data/               # Входные и выходные данные
│   └── logs/               # Логи парсинга
├── proto/                  # Protobuf определения (gRPC)
└── logs/                   # Общие логи приложения
```


